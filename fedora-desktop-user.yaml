---
# Set up facts
- hosts: localhost
  vars_files:
    - gsettings.yaml
  tasks:
    - name: Collect rustc version
      command: "rustc --version"
      register: rustc_version
      changed_when: false
    - set_fact:
        rustc_version: "{{ rustc_version.stdout.split(' ')[1] }}"

    - name: Collect GSettings
      tags:
        - gnome-settings
      command: gsettings get {{ item.schema }} {{ item.key }}
      register: current_gsettings
      with_items: "{{ gsettings }}"
      changed_when: false
    - set_fact:
        current_gsettings: >
          {{ current_gsettings
           | json_query('results[*].stdout')
          }}

    - name: Collect pandoc bash completion
      command: pandoc --bash-completion
      register: pandoc_bash_completion
      changed_when: false
    - name: Collect npm bash completion
      command: npm completion
      register: npm_bash_completion
      changed_when: false
    - set_fact:
        bash_completion:
          - name: npm
            content: "{{ npm_bash_completion.stdout }}"
          - name: pandoc
            content: "{{ pandoc_bash_completion.stdout }}"

- hosts: localhost
  vars_files:
    - gsettings.yaml
  vars:
    version: "{{ ansible_distribution_major_version }}"
    install_prefix: "{{ ansible_user_dir }}/.local"
    config_prefix: "{{ ansible_user_dir }}/.config"
    code_dir: "{{ ansible_user_dir }}/Code"
    gnome_src: "{{ code_dir }}/gnome/src"
    gnome_build: "{{ code_dir }}/gnome/build"
    gh_mattiasb: git@github.com:mattiasb
    gl_mattiasb: git@gitlab.com:mattiasb
  environment:
    PATH: "{{ ansible_env.PATH }}:{{ ansible_user_dir }}/.local/bin/"

  tasks:
    - name: GNOME settings
      tags:
        - gnome-settings
      command: >
        gsettings set {{ item.1.schema }}
                      {{ item.1.key }}
                      "{{ item.1.value }}"
      changed_when: "current_gsettings[item.0] != item.1.value"
      with_indexed_items: "{{ gsettings }}"

    - name: Fetch .local/bin
      tags:
        - fetch
        - update
        - localbin
      git:
        repo: "{{ gh_mattiasb }}/.local-bin.git"
        dest: "{{ ansible_user_dir }}/.local/bin"
        accept_hostkey: true
        version: master

    # Needed if we haven't logged in to the desktop session yet, and
    # thus doesn't have a .config dir yet
    - name: Init Config Directory
      tags:
        - setup
        - config
      file:
        path: "{{ config_prefix }}"
        state: directory

    - name: Init Config Git Directory
      tags:
        - fetch
        - config
      command: git clone-here "{{ gh_mattiasb }}/.config.git"
      args:
        chdir: "{{ config_prefix }}"
        creates: "{{ config_prefix }}/.gitignore"

    - name: Fetch Config
      tags:
        - fetch
        - update
        - config
      git:
        repo: "{{ gh_mattiasb }}/.config.git"
        dest: "{{ config_prefix }}"
        version: master
      register: fetch_config

    - name: Link Configuration files
      tags:
        - setup
        - config
      file:
        src: "{{ config_prefix }}/{{ item.src | default(omit) }}"
        dest: "{{ ansible_user_dir }}/{{ item.dest }}"
        state: "{{ item.state }}"
      with_items:
        - dest: .bashrc
          state: absent
        - src: bash/rc
          dest: .bashrc
          state: link

        - dest: .bash_profile
          state: absent
        - src: bash/profile
          dest: .bash_profile
          state: link

        - dest: .bash_logout
          state: absent
        - src: bash/logout
          dest: .bash_logout
          state: link

        - dest: .rpmmacros
          state: absent
        - src: rpm/macros
          dest: .rpmmacros
          state: link

        - dest: .inputrc
          state: absent
        - src: inputrc
          dest: .inputrc
          state: link

    - name: Enable User services
      systemd:
        name: "{{ item }}"
        user: true
        enabled: true
        state: started
      with_items:
        - rtags.socket
        - emacs.service
        - powerline-daemon.service

    - name: Generate bash completion files
      tags:
        - update
        - bash
        - completion
      copy:
        content: "{{ item.content }}"
        dest: "{{ config_prefix }}/bash_completion.d/{{ item.name }}"
      with_items: "{{ bash_completion }}"

    - name: Fetch mtg-decks
      tags:
        - fetch
        - update
        - mtg-decks
      git:
        repo: "{{ gl_mattiasb }}/mtg-decks.git"
        dest: "{{ ansible_user_dir }}/Documents/Magic/decks"
        accept_hostkey: true
        version: master

    - name: Update NPM Packages
      tags:
        - update
        - packages
        - npm
      command: npm install -g {{ item }}
      with_items:
        - eslint
        - grunt-cli
        - http-server
        - jake
        - jscs
        - jshint
        - yasel
      environment:
        NPM_CONFIG_USERCONFIG: "{{ config_prefix }}/npm/config"
      args:
        creates: "{{ install_prefix }}/bin/yasel"

    - name: Update LUA Packages
      tags:
        - update
        - packages
        - lua
      command: luarocks install {{ item }}
      environment:
        LUAROCKS_CONFIG: "{{ config_prefix }}/luarocks/config.lua"
      with_items:
        - luacheck
      args:
        creates: "{{ install_prefix }}/bin/luacheck"

    - name: Update go Packages
      tags:
        - update
        - packages
        - go
      command: go get -u {{ item }}
      with_items:
        - github.com/nsf/gocode
        - github.com/dougm/goflymake
        - github.com/rogpeppe/godef
      environment:
        GOBIN: "{{ install_prefix }}/bin"
        GOPATH: "{{ ansible_user_dir }}/Code/go:/usr/share/gocode"
      args:
        creates: "{{ install_prefix }}/bin/gocode"

    - name: Update Python 2 Packages
      tags:
        - update
        - packages
        - python2
      pip:
        name: "{{ item }}"
        extra_args: --user
        state: latest
        executable: pip2
      with_items:
        - git-spindle

    - name: Update Python 3 Packages
      tags:
        - update
        - packages
        - python3
      pip:
        name: "{{ item }}"
        extra_args: --user
        state: latest
        executable: pip3
      with_items:
        - autopep8
        - flake8
        - ipdb
        - ipython
        - isort
        - jedi
        - importmagic

    - name: Update Rust Packages
      tags:
        - update
        - packages
        - rust
      command: cargo install {{ item.pkg }}
      with_items:
        - pkg: racer
        - pkg: rustfmt
        - pkg: ripgrep
          bin: rg
      args:
        creates: "{{ install_prefix }}/bin/{{ item.bin | default(item.pkg) }}"
      environment:
        CARGO_HOME: "{{ install_prefix }}/share/cargo"
        CARGO_INSTALL_ROOT: "{{ install_prefix }}/"

    - name: Setup rpmdev
      tags:
        - setup
        - rpm
      command: rpmdev-setuptree
      args:
        creates: "{{ ansible_user_dir }}/Code/Fedora/rpmbuild/"

    - name: Setup JHBuild Directories
      tags:
        - setup
        - jhbuild
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ gnome_build }}"
        - "{{ gnome_src }}"

    - include: fetch_install.yaml
      static: false
      vars:
        tag: fonts
        repo: git@github.com:domtronn/all-the-icons.el.git
        dest: "{{ code_dir }}/github/domtronn/all-the-icons.el"
        install:
          src: fonts/*.ttf
          dest: "{{ install_prefix }}/share/fonts"
          mode: "0644"
        commands:
          - echo

    - include: fetch_install.yaml
      static: false
      vars:
        tag: jhbuild
        repo: "https://git.gnome.org/browse/jhbuild"
        dest: "{{ gnome_src }}/jhbuild"
        commands:
          - ./autogen.sh --prefix={{ install_prefix }}
          - make -j {{ ansible_processor_vcpus }}
          - make install

    - include: fetch_install.yaml
      static: false
      vars:
        tag: emacs
        repo: "{{ gh_mattiasb }}/.emacs.d.git"
        dest: "{{ ansible_user_dir }}/.emacs.d"
        commands:
          - make

    - include: fetch_install.yaml
      static: false
      vars:
        tag: git-fpaste
        repo: "{{ gh_mattiasb }}/git-fpaste.git"
        dest: "{{ code_dir }}/Projects/git-fpaste"
        creates: "{{ install_prefix }}/bin/git-fpaste"
        commands:
          - make user-install

    - include: fetch_install.yaml
      static: false
      vars:
        tag: git-each
        repo: git@github.com:tobias-johansson/git-each.git
        dest: "{{ code_dir }}/github/git-each"
        creates: "{{ install_prefix }}/bin/git-each"
        commands:
          - make user-install

    - include: fetch_install.yaml
      static: false
      vars:
        tag: git-wip
        repo: "{{ gh_mattiasb }}/git-wip.git"
        dest: "{{ code_dir }}/Projects/git-wip"
        creates: "{{ install_prefix }}/bin/git-wip"
        commands:
          - make user-install

    - name: Add Flatpak remotes
      tags:
        - flatpak
        - repos
        - install
      command: >
        flatpak --user remote-add
                {{ item.remote }}
                {{ item.url }}
      register: result
      failed_when:
        - "'already exists' not in result.stderr"
        - "result.rc != 0"
      changed_when:
        - "'already exists' not in result.stderr"
      with_items:
        - remote: gnome
          url: https://sdk.gnome.org/gnome.flatpakrepo
        - remote: gnome-apps
          url: https://sdk.gnome.org/gnome-apps.flatpakrepo
        - remote: gnome-nightly
          url: https://sdk.gnome.org/gnome-nightly.flatpakrepo
        - remote: gnome-apps-nightly
          url: https://sdk.gnome.org/gnome-apps-nightly.flatpakrepo
        - remote: flathub
          url: https://flathub.org/repo/flathub.flatpakrepo

    - name: Install Flatpak apps
      tags:
        - flatpak
        - apps
        - install
      command: "flatpak install -y --user {{ item.repo }} {{ item.name }}"
      register: result
      changed_when:
        - "'already installed, skipping' not in result.stderr"
      with_items:
        # Apps
        - name: org.gnome.Builder
          repo: gnome-apps
        - name: org.gnome.Games
          repo: gnome-apps
        - name: org.gnome.Maps
          repo: gnome-apps

        # Apps Nightly
        - name: org.gnome.Builder
          repo: gnome-apps-nightly
        - name: org.gnome.Maps
          repo: gnome-apps-nightly
        - name: org.gnome.Epiphany
          repo: gnome-apps-nightly
        - name: org.gnome.Games
          repo: gnome-apps-nightly

        # Flathub
        - name: com.spotify.Client
          repo: flathub
        - name: com.vinszent.GnomeTwitch
          repo: flathub
        - name: org.gnome.FeedReader
          repo: flathub

    - include: fetch_install.yaml
      static: false
      vars:
        tag: spotify
        repo: "{{ gh_mattiasb }}/spotify-2x.git"
        dest: "{{ code_dir }}/Projects/spotify-2x"
        creates: "{{ install_prefix }}/bin/spotify-2x"
        commands:
          - make user-install

    - name: Install Flatpak apps (via refs)
      tags:
        - flatpak
        - apps
        - install
      command: "flatpak install -y --user {{ item.url }}"
      register: result
      failed_when:
        - "'already installed' not in result.stderr"
        - "result.rc != 0"
      changed_when:
        - "'already installed' not in result.stderr"
      with_items:
        - url: https://flatpak.perezdecastro.org/revolt.flatpakref

    - name: Get Rust source
      tags:
        - fetch
        - rust-src
      git:
        repo: git@github.com:rust-lang/rust.git
        dest: "{{ code_dir }}/github/rust-lang/rust"
        accept_hostkey: true
        version: "{{ rustc_version }}"

    - name: Create VPN directories
      tags:
        - vpn
      file:
        path: "{{ ansible_user_dir }}/{{ item }}/pia-vpn"
        state: directory
      with_items:
        - Downloads
        - Documents

    - name: Get VPN config
      tags:
        - vpn
      unarchive:
        src: https://www.privateinternetaccess.com/openvpn/openvpn.zip
        dest: "{{ ansible_user_dir }}/Downloads/pia-vpn"
        remote_src: true
      register: pia_vpn_zip

    - name: Copy VPN cert and pem
      tags:
        - vpn
      copy:
        src: "{{ ansible_user_dir }}/Downloads/pia-vpn/{{ item }}"
        dest: "{{ ansible_user_dir }}/Documents/pia-vpn/{{ item }}"
      with_items:
        - ca.rsa.2048.crt
        - crl.rsa.2048.pem
      when: pia_vpn_zip.changed

    - name: Copy VPN configurations
      tags:
        - vpn
      copy:
        src: "{{ ansible_user_dir }}/Downloads/pia-vpn/{{ item }}"
        dest: "{{ ansible_user_dir }}/Documents/pia-vpn/Pia-{{ item }}"
      with_items:
        - Sweden.ovpn
      when: pia_vpn_zip.changed

    - name: Remove VPN config
      tags:
        - vpn
      command: nmcli connection delete Pia-Sweden
      register: result
      failed_when:
        - "'Error: unknown connection' not in result.stderr"
        - "result.rc != 0"
      changed_when: "'Error: unknown connection' not in result.stderr"
      when: pia_vpn_zip.changed

    - name: Import VPN config
      tags:
        - vpn
      command: >
        nmcli connection import type openvpn file
        {{ ansible_user_dir }}/Documents/pia-vpn/Pia-Sweden.ovpn
      when: pia_vpn_zip.changed
