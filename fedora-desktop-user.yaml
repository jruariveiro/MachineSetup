---
# Set up facts
- hosts: localhost
  tasks:
    - name: Collect rustc version
      command: "rustc --version"
      register: rustc_version
      changed_when: false
    - set_fact:
        rustc_version: "{{ rustc_version.stdout.split(' ')[1] }}"

    - name: Collect pandoc bash completion
      command: pandoc --bash-completion
      register: pandoc_bash_completion
      changed_when: false
    - name: Collect npm bash completion
      command: npm completion
      register: npm_bash_completion
      changed_when: false
    - set_fact:
        lazy_bash_completions:
          - name: npm
            content: "{{ npm_bash_completion.stdout }}"
          - name: pandoc
            content: "{{ pandoc_bash_completion.stdout }}"
- hosts: localhost
  vars_files:
    - gsettings.yaml
    - flatpaks.yaml
  vars:
    version: "{{ ansible_distribution_major_version }}"
    install_prefix: "{{ ansible_user_dir }}/.local"
    config_prefix: "{{ ansible_user_dir }}/.config"
    var_prefix: "{{ ansible_user_dir }}/.var"
    code_dir: "{{ ansible_user_dir }}/Code"
    gh_dir: "{{ ansible_user_dir }}/Code/github.com"
    projects_dir: "{{ gh_dir }}/mattiasb/"
    gnome_src: "{{ code_dir }}/gnome/src"
    gnome_build: "{{ code_dir }}/gnome/build"
    gh_mattiasb: git@github.com:mattiasb
    gl_mattiasb: git@gitlab.com:mattiasb
    lazy_bash_completion_dir: >-
      {{ install_prefix }}/share/bash-completion/completions/

  environment:
    PATH: "{{ ansible_env.PATH }}:{{ ansible_user_dir }}/.local/bin/"

  tasks:
    - name: GNOME settings
      tags:
        - gnome-settings
      dconf:
        key: "{{ item.key }}"
        value: "{{ item.value }}"
      with_items: "{{ gsettings }}"

    - name: Fetch .local/bin
      tags:
        - fetch
        - update
        - localbin
      git:
        repo: "{{ gh_mattiasb }}/.local-bin.git"
        dest: "{{ ansible_user_dir }}/.local/bin"
        accept_hostkey: true
        version: master
        update: false

    # Needed if we haven't logged in to the desktop session yet, and
    # thus doesn't have a .config dir yet
    - name: Init Config Directory
      tags:
        - setup
        - config
      file:
        path: "{{ config_prefix }}"
        state: directory

    - name: Init Config Git Directory
      tags:
        - fetch
        - config
      command: git clone-here "{{ gh_mattiasb }}/.config.git"
      args:
        chdir: "{{ config_prefix }}"
        creates: "{{ config_prefix }}/.gitignore"

    - name: Fetch Config
      tags:
        - fetch
        - update
        - config
      git:
        repo: "{{ gh_mattiasb }}/.config.git"
        dest: "{{ config_prefix }}"
        version: master
        update: false
      register: fetch_config

    - name: Link Configuration files
      tags:
        - setup
        - config
      file:
        src: "{{ config_prefix }}/{{ item.src | default(omit) }}"
        dest: "{{ ansible_user_dir }}/{{ item.dest }}"
        state: link
        force: true
      with_items:
        - src: bash/rc
          dest: .bashrc
        - src: bash/profile
          dest: .bash_profile
        - src: bash/logout
          dest: .bash_logout
        - src: rpm/macros
          dest: .rpmmacros
        - src: inputrc
          dest: .inputrc

    - name: Enable User services
      systemd:
        name: "{{ item }}"
        user: true
        enabled: true
        state: started
      with_items:
        - rdm.socket
        - emacs.service
        - wanderlust.service
        - powerline.service

    - name: Remove markdown mimetype
      tags:
        - markdown
      file:
        state: absent
        dest: "{{ install_prefix }}/share/mime/packages/text-markdown.xml"
      notify: Update user mime database

    - name: Create bash completion loader directory
      tags:
        - update
        - bash
        - completion
      file:
        path: "{{ lazy_bash_completion_dir }}"
        state: directory
        recurse: true

    - name: Generate bash completion files
      tags:
        - update
        - bash
        - completion
      copy:
        content: "{{ item.content }}"
        dest: "{{ lazy_bash_completion_dir }}/{{ item.name }}"
      with_items: "{{ lazy_bash_completions }}"

    - name: Copy bash completion files
      tags:
        - update
        - bash
        - completion
      copy:
        src: "{{ item }}"
        dest: "{{ lazy_bash_completion_dir }}"
      with_fileglob:
        - "bash-completion/*"

    - name: Fetch mtg-decks
      tags:
        - fetch
        - update
        - mtg-decks
      git:
        repo: "{{ gl_mattiasb }}/mtg-decks.git"
        dest: "{{ ansible_user_dir }}/Documents/Magic/decks"
        accept_hostkey: true
        version: master
        update: false

    - name: Update NPM Packages
      tags:
        - update
        - packages
        - npm
      npm:
        name: "{{ item }}"
        global: true
      with_items:
        - eslint
        - yasel
      environment:
        NPM_CONFIG_USERCONFIG: "{{ config_prefix }}/npm/config"

    - name: Update LUA Packages
      tags:
        - update
        - packages
        - lua
      command: luarocks install {{ item }}
      environment:
        LUAROCKS_CONFIG: "{{ config_prefix }}/luarocks/config.lua"
      with_items:
        - luacheck
      args:
        creates: "{{ install_prefix }}/bin/luacheck"

    - name: Update go Packages
      tags:
        - update
        - packages
        - go
      command: go get -u {{ item }}
      with_items:
        - github.com/nsf/gocode
        - github.com/dougm/goflymake
        - github.com/rogpeppe/godef
      environment:
        GOBIN: "{{ install_prefix }}/bin"
        GOPATH: "{{ ansible_user_dir }}/Code/go:/usr/share/gocode"
      args:
        creates: "{{ install_prefix }}/bin/gocode"

    - name: Update Python 2 Packages
      tags:
        - update
        - packages
        - python2
      pip:
        name: "{{ item }}"
        extra_args: --user
        executable: pip2
      with_items:
        - git-spindle

    - name: Update Python 3 Packages
      tags:
        - update
        - packages
        - python3
      pip:
        name: "{{ item }}"
        extra_args: --user
        executable: pip3
      with_items:
        - autopep8
        - flake8
        - ipdb
        - ipython
        - isort
        - jedi
        - importmagic
        - yasha

    - name: Update Rust Packages
      tags:
        - update
        - packages
        - rust
      command: cargo install {{ item.pkg }}
      with_items: []
      args:
        creates: "{{ install_prefix }}/bin/{{ item.bin | default(item.pkg) }}"
      environment:
        CARGO_HOME: "{{ install_prefix }}/share/cargo"
        CARGO_INSTALL_ROOT: "{{ install_prefix }}/"

    - name: Setup rpmdev
      tags:
        - setup
        - rpm
      command: rpmdev-setuptree
      args:
        creates: "{{ ansible_user_dir }}/Code/Fedora/rpmbuild/"

    - name: Setup JHBuild Directories
      tags:
        - setup
        - jhbuild
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ gnome_build }}"
        - "{{ gnome_src }}"

    - include_tasks: fetch_install.yaml
      vars:
        tag: fonts
        repo: git@github.com:domtronn/all-the-icons.el.git
        dest: "{{ gh_dir }}/domtronn/all-the-icons.el"
        install:
          src: fonts/*.ttf
          dest: "{{ install_prefix }}/share/fonts"
          mode: "0644"
        commands:
          - echo

    - name: Fetch virsh-completion
      git:
        repo: git@github.com:LuyaoHuang/virsh-bash-completion.git
        dest: "{{ gh_dir }}/LuyaoHuang/virsh-bash-completion"
        version: "87a81d7e7d2c9518d18a8a266153e09ef9b69d6c"

    - name: Install virsh-completion
      copy:
        src: >-
          {{ gh_dir
           + '/LuyaoHuang/virsh-bash-completion'
           + '/virsh_bash_completion'
          }}
        dest: "{{ lazy_bash_completion_dir }}/virsh"

    - name: Fetch ansible-completion
      git:
        repo: git@github.com:dysosmus/ansible-completion.git
        dest: "{{ gh_dir }}/dysosmus/ansible-completion"
        version: "851dc655472896a864dcfb2f7d3f82273e6e18f7"

    - name: Install ansible-completion
      copy:
        src: >-
          {{ gh_dir
           + '/dysosmus/ansible-completion/'
           + item | basename
          }}
        dest: >-
          {{ lazy_bash_completion_dir
           + '/'
           + item | basename | replace('-completion.bash','')
          }}
      with_fileglob: "{{ gh_dir }}/dysosmus/ansible-completion/*.bash"

    - include_tasks: fetch_install.yaml
      vars:
        tag: jhbuild
        repo: "https://git.gnome.org/browse/jhbuild"
        dest: "{{ gnome_src }}/jhbuild"
        creates: "{{ install_prefix }}/bin/jhbuild"
        commands:
          - ./autogen.sh --prefix={{ install_prefix }}
          - make -j {{ ansible_processor_vcpus }}
          - make install

    - include_tasks: fetch_install.yaml
      vars:
        tag: emacs
        repo: "{{ gh_mattiasb }}/.emacs.d.git"
        dest: "{{ ansible_user_dir }}/.emacs.d"
        commands:
          - make

    - include_tasks: fetch_install.yaml
      vars:
        tag: git-fpaste
        repo: "{{ gh_mattiasb }}/git-fpaste.git"
        dest: "{{ projects_dir }}/git-fpaste"
        creates: "{{ install_prefix }}/bin/git-fpaste"
        commands:
          - make user-install

    - include_tasks: fetch_install.yaml
      vars:
        tag: git-each
        repo: git@github.com:tobias-johansson/git-each.git
        dest: "{{ gh_dir }}/tobias-johansson/git-each"
        creates: "{{ install_prefix }}/bin/git-each"
        commands:
          - make user-install

    - include_tasks: fetch_install.yaml
      vars:
        tag: git-wip
        repo: "{{ gh_mattiasb }}/git-wip.git"
        dest: "{{ projects_dir }}/git-wip"
        creates: "{{ install_prefix }}/bin/git-wip"
        commands:
          - make user-install

    - include_tasks: fetch_install.yaml
      vars:
        tag: cquery
        repo: git@github.com:jacobdufault/cquery.git
        dest: "{{ gh_dir }}/jacobdufault/cquery"
        creates: "{{ install_prefix }}/bin/cquery"
        ref: v20180213
        update: false
        commands:
          - >-
            ./waf configure --llvm-config /usr/bin/llvm-config
                            --prefix=/home/mattiasb/.local/
          - ./waf build
          - ./waf install

    - name: Copy compose file to GTK+ flatpaks [1/2]
      tags:
        - flatpak
        - apps
        - gtk
        - compose
      file:
        path: "{{ var_prefix }}/app/{{ item }}/config/gtk-3.0"
        state: directory
        recurse: true
      with_items: "{{ gtk_flatpak_names}}"

    - name: Copy compose file to GTK+ flatpaks [2/2]
      tags:
        - flatpak
        - apps
        - gtk
        - compose
      copy:
        src: "{{ config_prefix }}/gtk-3.0/Compose"
        dest: "{{ var_prefix }}/app/{{ item }}/config/gtk-3.0/Compose"
      with_items: "{{ gtk_flatpak_names}}"

    - include_tasks: fetch_install.yaml
      vars:
        tag: spotify
        repo: "{{ gh_mattiasb }}/spotify-2x.git"
        dest: "{{ projects_dir }}/spotify-2x"
        creates: "{{ install_prefix }}/bin/spotify-2x"
        commands:
          - make user-install

    - include_tasks: fetch_install.yaml
      vars:
        tag: lastpass-cli
        repo: git@github.com:lastpass/lastpass-cli.git
        dest: "{{ gh_dir }}/lastpass/lastpass-cli"
        creates: "{{ install_prefix }}/bin/lpass"
        commands:
          - >-
            {{ 'cmake -GNinja'
             + ' -DCMAKE_INSTALL_PREFIX=~/.local'
             + ' -DBASH_COMPLETION_COMPLETIONSDIR='
             + ' ~/.local/share/bash-completion/completions/'
             + ' .'
            }}
          - ninja
          - ninja install

    - name: Get Rust source
      tags:
        - fetch
        - rust-src
      git:
        repo: git@github.com:rust-lang/rust.git
        dest: "{{ gh_dir }}/rust-lang/rust"
        accept_hostkey: true
        version: "{{ rustc_version }}"
        update: false

    - name: Create VPN directories
      tags:
        - vpn
      file:
        path: "{{ ansible_user_dir }}/{{ item }}/pia-vpn"
        state: directory
      with_items:
        - Downloads
        - Documents

    - name: Get VPN config
      tags:
        - vpn
      unarchive:
        src: https://www.privateinternetaccess.com/openvpn/openvpn.zip
        dest: "{{ ansible_user_dir }}/Downloads/pia-vpn"
        remote_src: true
      register: pia_vpn_zip

    - name: Copy VPN cert and pem
      tags:
        - vpn
      copy:
        src: "{{ ansible_user_dir }}/Downloads/pia-vpn/{{ item }}"
        dest: "{{ ansible_user_dir }}/Documents/pia-vpn/{{ item }}"
      with_items:
        - ca.rsa.2048.crt
        - crl.rsa.2048.pem
      when: pia_vpn_zip.changed

    - name: Copy VPN configurations
      tags:
        - vpn
      copy:
        src: "{{ ansible_user_dir }}/Downloads/pia-vpn/{{ item }}"
        dest: "{{ ansible_user_dir }}/Documents/pia-vpn/Pia-{{ item }}"
      with_items:
        - Sweden.ovpn
      when: pia_vpn_zip.changed

    - name: Remove VPN config
      tags:
        - vpn
      command: nmcli connection delete Pia-Sweden
      register: result
      failed_when:
        - "'Error: unknown connection' not in result.stderr"
        - "result.rc != 0"
      changed_when: "'Error: unknown connection' not in result.stderr"
      when: pia_vpn_zip.changed

    - name: Import VPN config
      tags:
        - vpn
      command: >
        nmcli connection import type openvpn file
        {{ ansible_user_dir }}/Documents/pia-vpn/Pia-Sweden.ovpn
      when: pia_vpn_zip.changed

  handlers:
    - name: Update user mime database
      command: "update-mime-database {{ ansible_user_dir }}/.local/share/mime"
